# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index

# SecureSocial Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# SecureSocial User Registration and password handling (only needed if you are using UsernamePasswordProvider)
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# SecureSocial Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

GET     /settings/user/:id          controllers.account.settings.Account.getUser(id:Long)
POST    /settings/account           controllers.account.settings.Account.save()
POST    /settings/mac               controllers.account.settings.Account.changeMac()
POST    /settings/notifs            controllers.account.settings.Notifs.save()
GET     /settings/link/remove/:id   controllers.account.settings.LinkController.deleteLink(id:Long)
POST    /settings/links             controllers.account.settings.LinkController.save()
GET     /settings/link/types        controllers.account.settings.LinkController.getTypes()
POST    /settings/email             controllers.account.settings.Account.saveEmail()

POST    /admin/submitusers          controllers.Admin.submitUsers()
GET     /admin/vote                 controllers.Admin.getVoteStatus()
POST    /admin/vote/:newStatus      controllers.Admin.changeVoteStatus(newStatus:String)
POST    /admin/deleteuser/:id       controllers.Admin.deleteCompte(id:Long)
POST    /admin/profil/:id/edit      controllers.Admin.editProfil(id:Long)
POST    /admin/mailing/:status      controllers.Admin.mailing(status:String)

POST    /proposals/:idProposal/comment      controllers.proposals.ProposalRestController.saveComment(idProposal:Long)
POST    /proposals/:idProposal/comment/:idComment/response  controllers.proposals.ProposalRestController.saveReponse(idProposal:Long,idComment:Long)
POST    /proposals/:idProposal/comment/:idComment/close     controllers.proposals.ProposalRestController.closeComment(idProposal:Long,idComment:Long)
POST    /proposals/:idProposal/comment/:idComment/delete    controllers.proposals.ProposalRestController.deleteComment(idProposal:Long,idComment:Long)
POST    /proposals/:idProposal/comment/:idComment/edit      controllers.proposals.ProposalRestController.editComment(idProposal:Long,idComment:Long)
POST    /proposals/:idProposal/status       controllers.proposals.ProposalRestController.saveStatus(idProposal:Long)
POST    /proposals/:idProposal/vote/:note   controllers.proposals.ProposalRestController.saveVote(idProposal:Long,note:java.lang.Integer)
POST    /proposals/rejectall            controllers.proposals.ProposalRestController.rejectAllRemainingProposals()
GET     /proposal/all/csv               controllers.proposals.ProposalRestController.getAllProposalsInCsv()
GET     /proposal/all                   controllers.proposals.ProposalRestController.all()
GET     /proposal/:idProposal               controllers.proposals.ProposalRestController.getById(idProposal:Long)
POST    /proposal/submit/:idProposal               controllers.proposals.ProposalRestController.submitProposal(idProposal:Long)
GET     /proposal                       controllers.proposals.ProposalRestController.get()
POST	/proposal                       controllers.proposals.ProposalRestController.save()
DELETE	/proposal/:idProposal               controllers.proposals.ProposalRestController.delete(idProposal:Long)
POST	/proposal/:idProposal/tags/:tags    controllers.proposals.ProposalRestController.addTag(idProposal:Long,tags:String)
GET     /proposalStat                   controllers.proposals.ProposalRestController.proposalStat()

GET	    /format/:id         controllers.FormatRestController.get(id:Long)
GET	    /format             controllers.FormatRestController.all()
POST	/format             controllers.FormatRestController.save()
DELETE	/format/:id         controllers.FormatRestController.delete(id:Long)

GET	    /event/:id          controllers.EventRestController.get(id:Long)
GET	    /event              controllers.EventRestController.all()
GET	    /user/event         controllers.EventRestController.getCurrentEvent()
POST	/event              controllers.EventRestController.save()
DELETE	/event/:id          controllers.EventRestController.delete(id:Long)

GET	    /track/:id            controllers.TrackRestController.get(id:Long)
GET	    /track/proposals/:id  controllers.TrackRestController.getProposals(id:Long)
GET	    /track                controllers.TrackRestController.all()
POST	/track                controllers.TrackRestController.save()
DELETE	/track/:id            controllers.TrackRestController.delete(id:Long)

GET	    /dynamicfield/:id   controllers.DynamicFieldRestController.get(id:Long)
GET	    /dynamicfield	    controllers.DynamicFieldRestController.all()
POST	/dynamicfield	    controllers.DynamicFieldRestController.save()
DELETE	/dynamicfield/:id   controllers.DynamicFieldRestController.delete(id:Long)

GET	/user/:userId/proposals		controllers.proposals.ProposalRestController.getProposals(userId:Long)
GET	/user/:userId/drafts		controllers.proposals.ProposalRestController.getProposalsDraft(userId:Long)
GET	/user/:userId/proposals/:status	controllers.proposals.ProposalRestController.getProposalsByStatus(userId:Long,status:String)

GET     /user/cospeakers            controllers.UserRestController.getCoSpeakers()
GET     /user/:id                   controllers.UserRestController.getUser(id:Long)
GET	    /userLogged                 controllers.UserRestController.getUserLogged()

GET     /admin/users/get            controllers.UserRestController.get()

GET     /accepted/jsonp             controllers.proposals.AcceptedController.acceptedProposalsToJson(callback:String)
GET     /accepted/speakers/mac      controllers.proposals.AcceptedController.adressMacOfAcceptedSpeakers()
GET     /accepted/speakers          controllers.proposals.AcceptedController.acceptedSpeakers()
GET     /accepted/speakers/jsonp    controllers.proposals.AcceptedController.acceptedSpeakersToJson(callback:String)
GET     /accepted/proposal/:id/jsonp    controllers.proposals.AcceptedController.acceptedProposalByIdJsonp(id:Long, callback:String)
GET     /accepted/proposal/:id          controllers.proposals.AcceptedController.acceptedProposalById(id:Long)

GET     /programme/jsonp            controllers.proposals.ProgrammeController.programmeAsJsonp(callback:String)
GET     /programme                  controllers.proposals.ProgrammeController.programme()

GET     /day/:day                   controllers.proposals.ProgrammeController.redirectRoom(day:Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


